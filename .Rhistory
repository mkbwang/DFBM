rm(list=ls())
library(dplyr)
mouse_cells_meta <- read.csv("experiment/tabula_muris/annotations_facs.csv")
mouse_facs_meta <- read.csv("experiment/tabula_muris/metadata_FACS.csv")
View(mouse_facs_meta)
View(mouse_cells_meta)
celltype_counts <- mouse_cells_meta %>% group_by(tissue, plate.barcode, cell_ontology_class) %>%
summarise(count=n())
spleen <- celltype_counts %>% filter(tissue == "Spleen")
fat <- celltype_counts %>% filter(tissue == "Fat")
View(fat)
fat_cells <- mouse_cells_meta %>% filter(tissue == "Fat") %>%
select(cell, cell_ontology_class, mouse.id, mouse.sex, plate.barcode, tissue)
fat_cells_majority <- fat_cells %>% filter(cell_ontology_class %in% c("B cell", "endothelial cell", "mesenchymal stem cell of adipose",
"myeloid cell", "T cell"))
set.seed(2024)
fat_cells_sample <- fat_cells_majority %>% group_by(cell_ontology_class) %>%
slice_sample(n=100)
rownames(fat_cells_sample) <- gsub("_", "-", fat_cells_sample$cell)
View(fat_cells_sample)
View(fat)
fat_counts <- read.csv("experiment/tabula_muris/FACS/Fat-counts.csv")
rownames(fat_counts) <- gsub("_", "-", fat_counts$X)
View(fat_counts)
fat_counts$X <- NULL
colnames(fat_counts) <- gsub("_", "-", colnames(fat_counts))
View(fat_counts)
library(Matrix)
# change to sparse matrix
fat_counts <- as(as.matrix(fat_counts), "sparseMatrix")
fat_cells_sample$cell <- gsub("_", "-", fat_cells_sample$cell)
fat_counts_sample <- fat_counts[, fat_cells_sample$cell]
# go through Seurat pipeline to find the most variable genes
library(Seurat)
fat_seurat <- CreateSeuratObject(counts = fat_counts_sample,
assay = "RNA", project = "mouse_fat",
meta.data=fat_cells_sample)
VlnPlot(fat_seurat, features = c("nFeature_RNA", "nCount_RNA"))
# find the most variable genes
fat_seurat <- NormalizeData(fat_seurat, normalization.method = "LogNormalize", scale.factor = 100000)
fat_seurat <- FindVariableFeatures(fat_seurat, selection.method = "vst", nfeatures = 1000)
head(VariableFeatures(fat_seurat), 10)
variable_counts <- fat_seurat[["RNA"]]$counts[VariableFeatures(fat_seurat), ]
writeMM(variable_counts, "experiment/tabula_muris/ZINBwave/mouse_fat_template_mat.mtx")
writeLines(rownames(variable_counts), "experiment/tabula_muris/ZINBwave/genes_template.txt")
writeLines(colnames(variable_counts), "experiment/tabula_muris/ZINBwave/cells_template.txt")
write.csv(fat_seurat[[]], "experiment/tabula_muris/ZINBwave/cells_metadata.tsv", sep='\t',
row.names=F, quote=F)
write.table(fat_seurat[[]], "experiment/tabula_muris/ZINBwave/cells_metadata.tsv", sep='\t',
row.names=F, quote=F)
counts_dense <- as.matrix(variable_counts)
log_counts_dense <- log10(1+counts_dense)
library(ggplot2)
library(reshape2)
plot_heatmap <- function(input_matrix, legend_title, has.legend=T,
colormap="viridis", min=0, max=3){
rownames(input_matrix) <- NULL
colnames(input_matrix) <- NULL
long_matrix <- melt(input_matrix)
base_plot <- ggplot(data = long_matrix, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() + labs(fill=legend_title) +
scale_fill_viridis_c(option = "viridis", limits=c(min, max))+
theme_minimal()
if (has.legend){
final_plot <- base_plot + theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y=element_blank())
} else{
final_plot <- base_plot + theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
}
return(final_plot)
}
my_heatmap <- plot_heatmap(log_counts_dense, legend_title="Log10Count",
min=0, max=3)
my_heatmap
library(Matrix)
rm(list=ls())
count_mat <- readMM("experiment/tabula_muris/ZINBwave/mouse_fat_template_mat.mtx")
gene_names <- readLines("experiment/tabula_muris/ZINBwave/genes_template.txt")
cell_names <- readLines("experiment/tabula_muris/ZINBwave/cells_template.txt")
rownames(count_mat) <- gene_names
colnames(count_mat) <- cell_names
count_mat_df <- as.data.frame(as.matrix(t(count_mat)))
write.table(count_mat_df, "experiment/tabula_muris/ZINBwave/template_raw.tsv",
sep='\t', quote=F)
metadata <- read.csv("experiment/tabula_muris/ZINBwave/cells_metadata.tsv")
metadata$Bcell <- 1*(metadata$cell_ontology_class == "B cell")
metadata$Tcell <- 1*(metadata$cell_ontology_class == "T cell")
metadata <- read.table("experiment/tabula_muris/ZINBwave/cells_metadata.tsv",
header=T, sep='\t')
View(metadata)
metadata$Bcell <- 1*(metadata$cell_ontology_class == "B cell")
metadata$Tcell <- 1*(metadata$cell_ontology_class == "T cell")
metadata$endothelial <- 1*(metadata$cell_ontology_class == "endothelial cell")
metadata$mesenchymal <- 1*(metadata$cell_ontology_class == "mesenchymal stem cell of adipose")
metadata$myeloid <- 1*(metadata$cell_ontology_class == "myeloid cell")
metadata_subset <- metadata[, c("Bcell", "Tcell", "endothelial", "mesenchymal", "myeloid")]
# visualize the original expressions on the log scale
log_count_mat <- log10(as.matrix(count_mat) + 1)
hist(sqrt(as.matrix(count_mat)), nclass=20)
rownames(log_count_mat) <- NULL
colnames(log_count_mat) <- NULL
source("visualization_utils.R")
source("experiment/visualization_utils.R")
viz_original <- plot_heatmap(log_count_mat, legend_title="Log10Count")
viz_original
# Set up singlecellexperiment object
library(SingleCellExperiment)
library(zinbwave)
sce <- SingleCellExperiment(list(counts=as.matrix(count_mat)),
colData = metadata_subset)
library(BiocParallel)
zinb_fit <- zinbFit(Y = sce, X = "~Bcell+Tcell+endothelial+mesenchymal+myeloid-1",
K=0, maxiter.optimize=40, which_assay="counts",
BPPARAM=MulticoreParam(4))
X_mat <- zinb_fit@X
beta_hat_mu <- zinb_fit@beta_mu
beta_hat_pi <- zinb_fit@beta_pi
V_mat <- t(zinb_fit@V)
gamma_hat_mu <- t(zinb_fit@gamma_mu)
gamma_hat_pi <- t(zinb_fit@gamma_pi)
log_mu_hat <- X_mat %*% beta_hat_mu + gamma_hat_mu %*% V_mat
mu_hat <- exp(log_mu_hat)
viz_logmu <- plot_heatmap(log10(t(mu_hat)+1), legend_title="Log10mu")
mu_hat_df <- data.frame(mu_hat)
rownames(mu_hat_df) <- colnames(count_mat)
colnames(mu_hat_df) <- rownames(count_mat)
write.table(mu_hat_df, "experiment/tabula_muris/ZINBwave/mu_hat.tsv",
sep='\t', quote=F)
logit_pi_hat <- X_mat %*% beta_hat_pi + gamma_hat_pi %*% V_mat
pi_hat <- exp(logit_pi_hat)/(1+exp(logit_pi_hat))
viz_pi <- plot_heatmap(t(1-pi_hat), legend_title="NonzeroProb",
min=0, max=1, colormap="inferno")
viz_pi
zinb_mu_hat <- mu_hat * (1-pi_hat)
log_zinb_mu_hat <- log10(zinb_mu_hat+1)
viz_zinb_mu <- plot_heatmap(t(log_zinb_mu_hat), legend_title="log10ZINB",
min=0, max=3)
pi_hat_df <- data.frame(pi_hat)
rownames(pi_hat_df) <- colnames(count_mat)
colnames(pi_hat_df) <- rownames(count_mat)
write.table(pi_hat_df, "experiment/tabula_muris/ZINBwave/pi_hat_sample.tsv",
sep='\t', quote=F)
theta_hat <- exp(zinb_fit@zeta)
theta_hat_df <- data.frame(theta_hat)
rownames(theta_hat_df) <- rownames(count_mat)
View(theta_hat_df)
write.table(theta_hat_df, "experiment/tabula_muris/ZINBwave/theta_hat.tsv",
sep='\t', quote=F)
new_counts <- matrix(0, nrow=ncol(count_mat),
ncol=nrow(count_mat))
dim(mu_hat)
for (i in 1:ncol(count_mat)) {
for (j in 1:nrow(count_mat)) {
if (runif(1) > pi_hat[i, j]) {
new_counts[i, j] <- rnbinom(1, mu = mu_hat[i, j], size = theta_hat[j])
}
}
}
log_new_counts <- log10(new_counts + 1)
viz_logcounts <- plot_heatmap(t(log_new_counts),
legend_title="Log10Count")
viz_logcounts
new_counts_df <- data.frame(new_counts)
rownames(new_counts_df) <- colnames(count_mat)
colnames(new_counts_df) <- rownames(count_mat)
write.table(new_counts_df, "experiment/tabula_muris/ZINBwave/simulated_counts.tsv",
sep='\t', quote=F)
rm(list=ls())
library(BiocCheck)
library(devtools)
create_package("~/UM/Research/MDAWG/NDBEC")
